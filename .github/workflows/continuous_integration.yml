# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI

on:
  pull_request:
  push:
    branches:
      - 'main'

jobs:
  build:
    strategy:
      matrix:
        include:
          - python_version: "3.9"
          - python_version: "3.10"
          - python_version: "3.11"
    runs-on: ubuntu-latest
    name: "Python ${{ matrix.python_version }}"

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest rigatoni pandas matplotlib pytest-cov coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        echo -e "[run]\nrelative_files = True" > .coveragerc
        pytest --cov penne
      env:
        COVERAGE_FILE: ".coverage.${{ matrix.python_version }}"
    - name: Verify Coverage File
      run: |
        ls -la
        cat .coverage.${{ matrix.python_version }}
        coverage report --data-file=".coverage.${{ matrix.python_version }}"
    - name: Store coverage file
      uses: actions/upload-artifact@v3
      with:
          name: coverage
          path: .coverage.${{ matrix.python_version }}


  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        id: download
        with:
          name: 'coverage'

      - name: Set up .coveragerc with relative files
        run: |
          echo -e "[run]\nrelative_files = True" > .coveragerc

      - name: Coverage comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_COVERAGE_FILES: true

      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@v3
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt
